package me.grocery.grocerylist.ai;

import static com.theokanning.openai.service.OpenAiService.defaultClient;
import static com.theokanning.openai.service.OpenAiService.defaultObjectMapper;
import static com.theokanning.openai.service.OpenAiService.defaultRetrofit;

import android.content.Context;
import android.util.Log;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.theokanning.openai.client.OpenAiApi;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;
import com.theokanning.openai.service.OpenAiService;

import org.json.JSONException;
import org.json.JSONObject;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import me.grocery.grocerylist.SplashActivity;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

/**
 * Generates prompts to a user based on their answer to an initial question.
 * The prompts are intended to refine the grocery list or meal plan the user is seeking to create.
 */
public class GroceryListConstructor {
    Context context;
    private final String API_KEY;
    private final String GPT_MODEL = "gpt-4-1106-preview";
    private final String FOLLOW_UP_PROMPT = "Suppose you asked someone the question \"%s\" and " +
            "they answered \"%s\" Ask them ONLY FIVE (no sub-questions) follow up questions that would allow you to " +
            "create a well-rounded meal plan for them based on their wants. Format this data " +
            "into a JSON file separating each question by a new line. Make sure to number each " +
            "question. Do not add any extra text.";

    // TODO: make sure api isn't evil
    private final String GENERATION_PROMPT = "Suppose you asked someone the question \"%s\" and " +
            "they answered \"%s\".  You then asked them five follow up questions: \"%s\", \"%s\"," +
            " \"%s\", \"%s\", \"%s\" and they answered \"%s\", \"%s\", \"%s\", \"%s\", \"%s\". " +
            "Please provide them with a grocery list that is closely based on " +
            "every answer they provided.  Additionally, provide general health and diet advice given what you asked " +
            "the user and their " +
            "respective answers. Format this data into a JSON file with a key for as many major " +
            "food" +
            " groups as you think they want, and it's corresponding pair as an array containing the foods. The key should only be one word, don't use underscores to essentially create one word out of two or more. At the end of " +
            "the JSON file, add a key for \"advice\" and include the general health and diet " +
            "advice you generated. Do not add any extra text. Do not add backticks(`) or the word json as if you were formatting it for Markup Language. " +
            "This will prevent me from turning it into a JSONObject.";


    private final String initialPrompt;
    private final String initialAnswer;

    /**
     * @param initialPrompt the initial question asked to the user regarding meal plan
     * @param initialAnswer the answer to the initial question
     */
    public GroceryListConstructor(String initialPrompt, String initialAnswer, Context context) {
        this.context = context;
        this.initialPrompt = initialPrompt;
        this.initialAnswer = initialAnswer;
        this.API_KEY = ApiKeyReader.getApiKey(context);
    }

    /**
     * Asks AI to generate questions to created a refined grocery list based on user's answer to
     * the initial prompt.
     *
     * @return List of follow questions generated by AI.
     */
    public List<String> followUpQuestions() {
        List<String> questions = new ArrayList<>();
        OpenAiService service = getClient(API_KEY, true);

        List<ChatMessage> messages = new ArrayList<>();
        ChatMessage message = new ChatMessage(ChatMessageRole.USER.value(),
                String.format(FOLLOW_UP_PROMPT, initialPrompt, initialAnswer));

        messages.add(message);
        ChatCompletionRequest completionRequest = ChatCompletionRequest.builder()
                // replace strings in follow up prompt with initial prompt and initial
                // answer
                .messages(messages)
                .model(GPT_MODEL)
                // .maxTokens(400)
                .build();

        ChatMessage response =
                service.createChatCompletion(completionRequest).getChoices().get(0).getMessage();

        String answer = response.getContent();

        try {
            JSONObject jsonObject = new JSONObject(answer);
            jsonObject.keys().forEachRemaining(key -> {
                try {
                    questions.add(jsonObject.getString(key));
                } catch (JSONException e) {
                    throw new RuntimeException(e);
                }
            });
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }

        return questions;
    }

    OpenAiService getClient(String key, boolean jsonMode) {
        ObjectMapper mapper = defaultObjectMapper();
        if (jsonMode) {
            mapper.addMixIn(ChatCompletionRequest.class, JsonChatCompletionRequest.class);
        }
        OkHttpClient client = defaultClient(key, Duration.ZERO)
                .newBuilder()
                .build();
        Retrofit retrofit = defaultRetrofit(client, mapper);
        OpenAiApi api = retrofit.create(OpenAiApi.class);
        return new OpenAiService(api);
    }

    /**
     * Generate a grocery list and store it into JSON based on user answers to questions.
     * Also provides general health advice to be stored in the JSON file.
     * @param questions the questions asked to the user
     * @param answers the answers to the questions from the user
     * @return the {@link JSONObject} with grocery list and advice data
     */
    public JSONObject generateGroceryList(List<String> questions, List<String> answers) {
        List<ChatMessage> messages = new ArrayList<>();
        OpenAiService service = getClient(API_KEY, true);

        // TODO: write this properly, it could cause a lot of issues.
        ChatMessage message = new ChatMessage(ChatMessageRole.USER.value(),
                String.format(GENERATION_PROMPT, initialPrompt, initialAnswer, questions.get(0),
                        questions.get(1), questions.get(2), questions.get(3), questions.get(4),
                        answers.get(0), answers.get(1), answers.get(2), answers.get(3),
                        answers.get(4)));
        messages.add(message);

        ChatCompletionRequest completionRequest = ChatCompletionRequest.builder()
                .messages(messages)
                .model(GPT_MODEL)
                // .maxTokens(400)
                .build();

        ChatMessage response =
                service.createChatCompletion(completionRequest).getChoices().get(0).getMessage();

        String answer = response.getContent();

        JSONObject jsonObject = null;
        Log.d("JSONOBJECT:", answer);
        try {
            jsonObject = new JSONObject(answer);
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }

        return jsonObject;
    }

    /**
     * @return the initial prompt
     */
    public String getInitialPrompt() {
        return initialPrompt;
    }

    /**
     * @return the answer to the initial prompt
     */
    public String getInitialAnswer() {
        return initialAnswer;
    }
}
