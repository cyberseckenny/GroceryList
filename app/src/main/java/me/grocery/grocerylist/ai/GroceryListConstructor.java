package me.grocery.grocerylist.ai;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;

import com.theokanning.openai.completion.CompletionChoice;
import com.theokanning.openai.completion.CompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;
import com.theokanning.openai.service.OpenAiService;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Generates prompts to a user based on their answer to an initial question.
 * The prompts are intended to refine the grocery list or meal plan the user is seeking to create.
 */
public class GroceryListConstructor {
    private final String API_KEY = "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";
    private final String FOLLOW_UP_PROMPT = "Suppose you asked someone the question \"%s\" and " +
            "they answered \"%s\" Ask them five follow up questions that would allow you to " +
            "create a well-rounded meal plan for them based on their wants. Format this data " +
            "into a text file separating each question be a new line. Do not add any extra text.";
    private final String initialPrompt;
    private final String initialAnswer;

    /**
     * @param initialPrompt the initial question asked to the user regarding meal plan
     * @param initialAnswer the answer to the initial question
     */
    public GroceryListConstructor(String initialPrompt, String initialAnswer) {
        this.initialPrompt = initialPrompt;
        this.initialAnswer = initialAnswer;
    }

    /**
     * Asks AI to generate questions to created a refined grocery list based on user's answer to
     * the initial prompt.
     *
     * @return List of follow questions generated by AI.
     */
    public List<String> followUpQuestions() {
        List<String> questions = new ArrayList<>();
        OpenAiService service = new OpenAiService(API_KEY);

        List<ChatMessage> messages = new ArrayList<>();
        ChatMessage message = new ChatMessage(ChatMessageRole.USER.value(),
                String.format(FOLLOW_UP_PROMPT, initialPrompt, initialAnswer));
        messages.add(message);
        ChatCompletionRequest completionRequest = ChatCompletionRequest.builder()
                // replace strings in follow up prompt with initial prompt and initial
                // answer
                .messages(messages)
                .model("gpt-3.5-turbo")
                // .maxTokens(400)
                .build();


        ChatMessage response =
                service.createChatCompletion(completionRequest).getChoices().get(0).getMessage();

        String answer = response.getContent();
        Collections.addAll(questions, answer.split("\n"));

        return questions;
    }


    /**
     * @return the initial prompt
     */
    public String getInitialPrompt() {
        return initialPrompt;
    }

    /**
     * @return the answer to the initial prompt
     */
    public String getInitialAnswer() {
        return initialAnswer;
    }
}
